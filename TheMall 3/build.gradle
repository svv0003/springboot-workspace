plugins {
    id 'java'                                               // Java 프로젝트 빌드를 위한 기본 플러그인
    id 'org.springframework.boot' version '3.5.6'           // Spring Boot 어플리케이션 빌드를 위한 플러그인
    id 'io.spring.dependency-management' version '1.1.7'    // Spring Boot 의존성 버전을 자동 관리하여 일관성 보장
}

group = 'com.thejoeun'                                      // 프로젝트 그룹 ID
version = '0.0.1-SNAPSHOT'                                  // 프로젝트 버전
description = 'The Mall Project'                            // 프로젝트 설명

java {
    toolchain {                   // gradle이 지정된 Java 버전으로 빌드하도록 보장
        languageVersion = JavaLanguageVersion.of(21)        // Java 버전 (21) 지정
    }
}

configurations {
    compileOnly {                                           // 컴파일 시에만 필요한 의존성 설정
        extendsFrom annotationProcessor                     // 어노테이선 프로세서 의존성을 컴파일 의존성에 포함
    }
}

repositories {                                              // 의존성 다운로드할 저장소 지정
    mavenCentral()                                          // Maven 중앙 저장소 사용
}

dependencies {                                                           // 프로젝트에 필요한 외부 라이브러리 지정
    // implementation       런타임 및 컴파일에 사용.
    // compileOnly          컴파일 시에만 사용 (예: Lombok).
    // annotationProcessor  어노테이션 처리기용.
    // testImplementation   테스트 코드에만 사용.
    // runtimeOnly          런타임에만 사용 (예: DB 드라이버).
    // developmentOnly      개발 환경에서만 사용.
    implementation 'org.springframework.boot:spring-boot-starter'                       // Spring Boot 기본 의존성 (핵심 기능)
    implementation 'org.springframework.boot:spring-boot-starter-actuator'              // 모니터링 및 관리
    implementation 'org.springframework.boot:spring-boot-configuration-processor'       // 설정 프로세서
    implementation 'org.springframework.boot:spring-boot-starter-web'                   // 웹 어플리케이션 (REST API 및 MVC 웹 어플리케이션)
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'          // MyBatis (MyBatis와 Spring 통합)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'              // JPA/Hibernate (Hibernate 기반 JPA)
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'                  // JDBC (JDBC DB 연결)
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'             // Thymeleaf 템플릿 (Thymeleaf 템플릿 엔진)
    implementation 'org.projectlombok:lombok'                                           // Lombok
    compileOnly 'org.projectlombok:lombok'                                              // 컴파일 시 Lombok
    annotationProcessor 'org.projectlombok:lombok'                                      // 어노테이션 처리
    testCompileOnly 'org.projectlombok:lombok'                                          // 테스트용 Lombok
    testAnnotationProcessor 'org.projectlombok:lombok'                                  // 테스트용 어노테이션 처리
    testImplementation 'org.springframework.boot:spring-boot-starter-test'              // 테스트 프레임워크 (JUnit, Mockito 등 테스트 지원)
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4' // MyBatis 테스트
    developmentOnly 'org.springframework.boot:spring-boot-devtools'                     // 개발용 핫 리로딩 (개발 중 자동 리로딩)
    runtimeOnly 'com.mysql:mysql-connector-j'                                           // MySQL 드라이버 (MySQL DB 드라이버)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'            // OpenAPI/Swagger (Swagger UI로 API 문서화)
    implementation 'org.springframework.boot:spring-boot-starter-validation'            // 유효성 검사 (입력 데이터 유효성 검사)
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'                        // JUnit 플랫폼
}

tasks.named('test') {                                                       // 테스트 작업 설정
    useJUnitPlatform()                                                                  // JUnit 사용
}


/*
Gradle은 Java 프로젝트를 빌드하는 도구.
플러그인은 Gradle에 특정 작업을 위한 기능을 추가하는 옵션.

테스트 (Test)는 작성한 코드가 제대로 작동하는지 확인하는 과정.
의도한 대로 동작하는지, 버그가 없는지 확인하는 시험.

컴파일 (Compile)은 작성한 코드를 컴퓨터가 이해할 수 있는 언어로 바꾸는 과정.
.java 파일을 컴파일하여 .class 파일로 바꿔 실행 가능한 형태가 되도록 한다.

런타임은 프로그램이 실제로 실행되는 시점.
컴파일이 끝나고 프로그램이 동작할 때 필요한 환경이나 라이브러리를 의미한다.
 */